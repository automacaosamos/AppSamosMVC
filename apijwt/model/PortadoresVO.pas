unit PortadoresVO;

interface

uses
  DB,
  System.SysUtils,
  System.Generics.Collections,
  System.Classes;
  type
  TPortadoresBasicaVO = class
  private
    P_PORTADORES_ID            : Integer; // INTEGER GENERATED BY DEFAULT AS IDENTITY,
    P_PORTADORES_STATUS        : String;  // CHAR(1) NOT NULL,
    P_PORTADORES_CPFCNPJ       : String;  // VARCHAR(15),
    P_PORTADORES_CADASTRO      : TDate;   // DATE,
    P_PORTADORES_NOME          : String;  // VARCHAR(50) COLLATE PT_BR,
    P_PORTADORES_CEP           : String;  // VARCHAR(8),
    P_PORTADORES_ENDERECO      : String;  // VARCHAR(50),
    P_PORTADORES_NUMERO        : String;  // VARCHAR(10),
    P_PORTADORES_BAIRRO        : String;  // VARCHAR(50),
    P_PORTADORES_ID_CIDADES    : Integer; // INTEGER NOT NULL,
    P_PORTADORES_TELEFONE      : String;  // VARCHAR(15),
    P_PORTADORES_EMAIL         : String;  // VARCHAR(50),
    P_PORTADORES_ID_BANCOS     : Integer; // INTEGER NOT NULL,
    P_PORTADORES_AGENCIA       : String;  // VARCHAR(6),
    P_PORTADORES_CONTA         : String;  // VARCHAR(15),
    P_PORTADORES_CONVENIO      : String;  // VARCHAR(15),
    P_PORTADORES_CARTEIRA      : String;  // VARCHAR(2),
    P_PORTADORES_PROTESTO      : String;  // VARCHAR(2),
    P_PORTADORES_DEVOLUCAO     : String;  // VARCHAR(2),
    P_PORTADORES_REMESSA       : Integer; // INTEGER,
    P_PORTADORES_NOSSONUMERO   : Integer; // INTEGER,
    P_PORTADORES_MORA          : Real;    // NUMERIC(6,3),
    P_PORTADORES_MULTA         : Real;    // NUMERIC(6,3),
    P_PORTADORES_ID_EMPRESAS   : Integer; // INTEGER
    P_CIDADES_NOME             : String;
    P_CIDADES_ESTADO           : String;
    P_CIDADES_IBGE             : String;
    P_BANCOS_NOME              : String;
    P_EMPRESAS_NOME            : String;
  public
    property PORTADORES_ID            : Integer  read P_PORTADORES_ID              write P_PORTADORES_ID;
    property PORTADORES_STATUS        : String   read P_PORTADORES_STATUS          write P_PORTADORES_STATUS;
    property PORTADORES_CPFCNPJ       : String   read P_PORTADORES_CPFCNPJ         write P_PORTADORES_CPFCNPJ;
    property PORTADORES_CADASTRO      : TDate    read P_PORTADORES_CADASTRO        write P_PORTADORES_CADASTRO;
    property PORTADORES_NOME          : String   read P_PORTADORES_NOME            write P_PORTADORES_NOME;
    property PORTADORES_CEP           : String   read P_PORTADORES_CEP             write P_PORTADORES_CEP;
    property PORTADORES_ENDERECO      : String   read P_PORTADORES_ENDERECO        write P_PORTADORES_ENDERECO;
    property PORTADORES_NUMERO        : String   read P_PORTADORES_NUMERO          write P_PORTADORES_NUMERO;
    property PORTADORES_BAIRRO        : String   read P_PORTADORES_BAIRRO          write P_PORTADORES_BAIRRO;
    property PORTADORES_ID_CIDADES    : Integer  read P_PORTADORES_ID_CIDADES      write P_PORTADORES_ID_CIDADES;
    property PORTADORES_TELEFONE      : String   read P_PORTADORES_TELEFONE        write P_PORTADORES_TELEFONE;
    property PORTADORES_EMAIL         : String   read P_PORTADORES_EMAIL           write P_PORTADORES_EMAIL;
    property PORTADORES_ID_BANCOS     : Integer  read P_PORTADORES_ID_BANCOS       write P_PORTADORES_ID_BANCOS;
    property PORTADORES_AGENCIA       : String   read P_PORTADORES_AGENCIA         write P_PORTADORES_AGENCIA;
    property PORTADORES_CONTA         : String   read P_PORTADORES_CONTA           write P_PORTADORES_CONTA;
    property PORTADORES_CONVENIO      : String   read P_PORTADORES_CONVENIO        write P_PORTADORES_CONVENIO;
    property PORTADORES_CARTEIRA      : String   read P_PORTADORES_CARTEIRA        write P_PORTADORES_CARTEIRA;
    property PORTADORES_PROTESTO      : String   read P_PORTADORES_PROTESTO        write P_PORTADORES_PROTESTO;
    property PORTADORES_DEVOLUCAO     : String   read P_PORTADORES_DEVOLUCAO       write P_PORTADORES_DEVOLUCAO;
    property PORTADORES_REMESSA       : Integer  read P_PORTADORES_REMESSA         write P_PORTADORES_REMESSA;
    property PORTADORES_NOSSONUMERO   : Integer  read P_PORTADORES_NOSSONUMERO     write P_PORTADORES_NOSSONUMERO;
    property PORTADORES_MORA          : Real     read P_PORTADORES_MORA            write P_PORTADORES_MORA;
    property PORTADORES_MULTA         : Real     read P_PORTADORES_MULTA           write P_PORTADORES_MULTA;
    property PORTADORES_ID_EMPRESAS   : Integer  read P_PORTADORES_ID_EMPRESAS     write P_PORTADORES_ID_EMPRESAS;
    property CIDADES_NOME             : String    read P_CIDADES_NOME              write P_CIDADES_NOME;
    property CIDADES_ESTADO           : String    read P_CIDADES_ESTADO            write P_CIDADES_ESTADO;
    property CIDADES_IBGE             : String    read P_CIDADES_IBGE              write P_CIDADES_IBGE;
    property BANCOS_NOME              : String    read P_BANCOS_NOME               write P_BANCOS_NOME;
    property EMPRESAS_NOME            : String    read P_EMPRESAS_NOME             write P_EMPRESAS_NOME;
  end;

type
  TPortadoresVO = class
  private
    p_results : TObjectList<TPortadoresBasicaVO>;
    p_total   : Integer;
  public
    property results : TObjectList<TPortadoresBasicaVO> read p_results  write p_results;
    property total   : Integer                          read p_total    write p_total;
    class function GetAll(Parametros,Start,Limit:String)                                : TPortadoresVO;
    class function GetByID(Parametros:integer)                                          : TPortadoresVO;
    class function CreateRecord(PortadoresBasicaVO: TPortadoresBasicaVO)                    : TPortadoresVO;
    class function UpdateRecord(Parametros:Integer;PortadoresBasicaVO: TPortadoresBasicaVO) : TPortadoresVO;
    class function DeleteRecord(Parametros:Integer)                                     : TPortadoresVO;
    destructor Destroy; override;
  end;

implementation

uses ConexoesController, FuncoesController;

destructor TPortadoresVO.Destroy;
var
  PortadoresBasica : TPortadoresBasicaVO;
begin
  for PortadoresBasica in results do
    PortadoresBasica.Free;
  inherited;
end;

procedure ObjectToDataSet(PortadoresBasicaVO:TPortadoresBasicaVO;DataSetPortadores:TDataSet);
begin
  DataSetPortadores.FindField('PORTADORES_ID').AsInteger          := PortadoresBasicaVO.PORTADORES_ID;
  DataSetPortadores.FindField('PORTADORES_STATUS').AsString       := PortadoresBasicaVO.PORTADORES_STATUS;
  DataSetPortadores.FindField('PORTADORES_CPFCNPJ').AsString      := PortadoresBasicaVO.PORTADORES_CPFCNPJ;
  DataSetPortadores.FindField('PORTADORES_CADASTRO').AsDateTIme   := PortadoresBasicaVO.PORTADORES_CADASTRO;
  DataSetPortadores.FindField('PORTADORES_NOME').AsString         := PortadoresBasicaVO.PORTADORES_NOME;
  DataSetPortadores.FindField('PORTADORES_CEP').AsString          := PortadoresBasicaVO.PORTADORES_CEP;
  DataSetPortadores.FindField('PORTADORES_ENDERECO').AsString     := PortadoresBasicaVO.PORTADORES_ENDERECO;
  DataSetPortadores.FindField('PORTADORES_NUMERO').AsString       := PortadoresBasicaVO.PORTADORES_NUMERO;
  DataSetPortadores.FindField('PORTADORES_BAIRRO').AsString       := PortadoresBasicaVO.PORTADORES_BAIRRO;
  DataSetPortadores.FindField('PORTADORES_ID_CIDADES').AsInteger  := PortadoresBasicaVO.PORTADORES_ID_CIDADES;
  DataSetPortadores.FindField('PORTADORES_TELEFONE').AsString     := PortadoresBasicaVO.PORTADORES_TELEFONE;
  DataSetPortadores.FindField('PORTADORES_EMAIL').AsString        := PortadoresBasicaVO.PORTADORES_EMAIL;
  DataSetPortadores.FindField('PORTADORES_ID_BANCOS').AsInteger   := PortadoresBasicaVO.PORTADORES_ID_BANCOS;
  DataSetPortadores.FindField('PORTADORES_AGENCIA').AsString      := PortadoresBasicaVO.PORTADORES_AGENCIA;
  DataSetPortadores.FindField('PORTADORES_CONTA').AsString        := PortadoresBasicaVO.PORTADORES_CONTA;
  DataSetPortadores.FindField('PORTADORES_CONVENIO').AsString     := PortadoresBasicaVO.PORTADORES_CONVENIO;
  DataSetPortadores.FindField('PORTADORES_CARTEIRA').AsString     := PortadoresBasicaVO.PORTADORES_CARTEIRA;
  DataSetPortadores.FindField('PORTADORES_PROTESTO').AsString     := PortadoresBasicaVO.PORTADORES_PROTESTO;
  DataSetPortadores.FindField('PORTADORES_DEVOLUCAO').AsString    := PortadoresBasicaVO.PORTADORES_DEVOLUCAO;
  DataSetPortadores.FindField('PORTADORES_REMESSA').AsInteger     := PortadoresBasicaVO.PORTADORES_REMESSA;
  DataSetPortadores.FindField('PORTADORES_NOSSONUMERO').AsInteger := PortadoresBasicaVO.PORTADORES_NOSSONUMERO;
  DataSetPortadores.FindField('PORTADORES_MORA').AsFloat          := PortadoresBasicaVO.PORTADORES_MORA;
  DataSetPortadores.FindField('PORTADORES_MULTA').AsFloat         := PortadoresBasicaVO.PORTADORES_MULTA;
  DataSetPortadores.FindField('PORTADORES_ID_EMPRESAS').AsInteger := PortadoresBasicaVO.PORTADORES_ID_EMPRESAS;
end;
procedure DataSetToObject(DataSetPortadores:TDataSet;PortadoresBasicaVO:TPortadoresBasicaVO);
begin
  PortadoresBasicaVO.PORTADORES_ID           := DataSetPortadores.FindField('PORTADORES_ID').AsInteger;
  PortadoresBasicaVO.PORTADORES_STATUS       := DataSetPortadores.FindField('PORTADORES_STATUS').AsString;
  PortadoresBasicaVO.PORTADORES_CPFCNPJ      := DataSetPortadores.FindField('PORTADORES_CPFCNPJ').AsString;
  PortadoresBasicaVO.PORTADORES_CADASTRO     := DataSetPortadores.FindField('PORTADORES_CADASTRO').AsDateTime;
  PortadoresBasicaVO.PORTADORES_NOME         := DataSetPortadores.FindField('PORTADORES_NOME').AsString;
  PortadoresBasicaVO.PORTADORES_CEP          := DataSetPortadores.FindField('PORTADORES_CEP').AsString;
  PortadoresBasicaVO.PORTADORES_ENDERECO     := DataSetPortadores.FindField('PORTADORES_ENDERECO').AsString;
  PortadoresBasicaVO.PORTADORES_NUMERO       := DataSetPortadores.FindField('PORTADORES_NUMERO').AsString;
  PortadoresBasicaVO.PORTADORES_BAIRRO       := DataSetPortadores.FindField('PORTADORES_BAIRRO').AsString;
  PortadoresBasicaVO.PORTADORES_ID_CIDADES   := DataSetPortadores.FindField('PORTADORES_ID_CIDADES').AsInteger;
  PortadoresBasicaVO.PORTADORES_TELEFONE     := DataSetPortadores.FindField('PORTADORES_TELEFONE').AsString;
  PortadoresBasicaVO.PORTADORES_EMAIL        := DataSetPortadores.FindField('PORTADORES_EMAIL').AsString;
  PortadoresBasicaVO.PORTADORES_ID_BANCOS    := DataSetPortadores.FindField('PORTADORES_ID_BANCOS').AsInteger;
  PortadoresBasicaVO.PORTADORES_AGENCIA      := DataSetPortadores.FindField('PORTADORES_AGENCIA').AsString;
  PortadoresBasicaVO.PORTADORES_CONTA        := DataSetPortadores.FindField('PORTADORES_CONTA').AsString;
  PortadoresBasicaVO.PORTADORES_CONVENIO     := DataSetPortadores.FindField('PORTADORES_CONVENIO').AsString;
  PortadoresBasicaVO.PORTADORES_CARTEIRA     := DataSetPortadores.FindField('PORTADORES_CARTEIRA').AsString;
  PortadoresBasicaVO.PORTADORES_PROTESTO     := DataSetPortadores.FindField('PORTADORES_PROTESTO').AsString;
  PortadoresBasicaVO.PORTADORES_DEVOLUCAO    := DataSetPortadores.FindField('PORTADORES_DEVOLUCAO').AsString;
  PortadoresBasicaVO.PORTADORES_REMESSA      := DataSetPortadores.FindField('PORTADORES_REMESSA').AsInteger;
  PortadoresBasicaVO.PORTADORES_NOSSONUMERO  := DataSetPortadores.FindField('PORTADORES_NOSSONUMERO').AsInteger;
  PortadoresBasicaVO.PORTADORES_MORA         := DataSetPortadores.FindField('PORTADORES_MORA').AsFloat;
  PortadoresBasicaVO.PORTADORES_MULTA        := DataSetPortadores.FindField('PORTADORES_MULTA').AsFloat;
  PortadoresBasicaVO.PORTADORES_ID_EMPRESAS  := DataSetPortadores.FindField('PORTADORES_ID_EMPRESAS').AsInteger;
  PortadoresBasicaVO.CIDADES_NOME            := DataSetPortadores.FindField('CIDADES_NOME').AsString;
  PortadoresBasicaVO.CIDADES_ESTADO          := DataSetPortadores.FindField('CIDADES_ESTADO').AsString;
  PortadoresBasicaVO.CIDADES_IBGE            := DataSetPortadores.FindField('CIDADES_IBGE').AsString;
  PortadoresBasicaVO.BANCOS_NOME             := DataSetPortadores.FindField('BANCOS_NOME').AsString;
  PortadoresBasicaVO.EMPRESAS_NOME           := DataSetPortadores.FindField('EMPRESAS_NOME').AsString;

end;
class function TPortadoresVO.GetAll(Parametros,Start,Limit:String): TPortadoresVO;
var
  ConexoesControl  : TConexoesController;
  DataSetPortadores  : TDataSet;
  PortadoresVO       : TPortadoresVO;
  PortadoresBasicaVO : TPortadoresBasicaVO;
  SQLAtivo         : String;
  SQLWhere         : String;
  SQLOrder         : String;
  Registros        : Integer;
  Itens            : Integer;
  StrParametros    : TStringList;
begin

  ConexoesControl  := TConexoesController.Create;

  if StrContains(Parametros,'|') then
    StrParametros := Explode(Parametros,'|')
  else
    begin
      StrParametros := TStringList.Create;
      StrParametros.add(Parametros);
    end;

  if StrParametros[0] = 'ULTIMAPORTADORES' then
    begin
      try
        PortadoresVO                   := TPortadoresVO.Create;
        PortadoresVO.results           := TObjectList<TPortadoresBasicaVO>.Create;
        PortadoresVO.Total             := 1;
        PortadoresBasicaVO             := TPortadoresBasicaVO.Create;
        PortadoresBasicaVO.PORTADORES_ID := ConexoesControl.Ultimo_ID('PORTADORES','F');
        PortadoresVO.results.Add(PortadoresBasicaVO);
      finally
        FreeAndNil(StrParametros);
        FreeAndNil(ConexoesControl);
      end;

      try
        PortadoresVO                                 := TPortadoresVO.Create;
        PortadoresVO.results                         := TObjectList<TPortadoresBasicaVO>.Create;
        PortadoresVO.Total                           := 1;
        PortadoresBasicaVO                           := TPortadoresBasicaVO.Create;
        PortadoresBasicaVO.PORTADORES_ID             := ConexoesControl.Ultimo_ID('PORTADORES','F') + 1;
        PortadoresBasicaVO.PORTADORES_NOME           := '';
        PortadoresBasicaVO.PORTADORES_STATUS         := 'T';
        PortadoresBasicaVO.PORTADORES_CADASTRO       := Date;
        PortadoresBasicaVO.PORTADORES_ID_CIDADES     := 0;
        PortadoresBasicaVO.PORTADORES_ID_BANCOS      := 0;
        PortadoresBasicaVO.PORTADORES_AGENCIA        := '';
        PortadoresBasicaVO.PORTADORES_CONTA          := '';
        PortadoresBasicaVO.PORTADORES_CONVENIO       := '';
        PortadoresBasicaVO.PORTADORES_CARTEIRA       := '';
        PortadoresBasicaVO.PORTADORES_PROTESTO       := '5';
        PortadoresBasicaVO.PORTADORES_DEVOLUCAO      := '20';
        PortadoresBasicaVO.PORTADORES_REMESSA        := 0;
        PortadoresBasicaVO.PORTADORES_NOSSONUMERO    := 0;
        PortadoresBasicaVO.PORTADORES_MORA           := 2;
        PortadoresBasicaVO.PORTADORES_MULTA          := 0;
        PortadoresBasicaVO.PORTADORES_ID_EMPRESAS    := 1;
        PortadoresVO.results.Add(PortadoresBasicaVO);
      finally
        FreeAndNil(StrParametros);
        FreeAndNil(ConexoesControl);
      end;

    end
  else
    begin
      SQLWhere := ' where PORTADORES_ID > 0 ';

      if StrLeft(StrParametros[0],1) = '.' then
        begin
          SQLWhere := ' where PORTADORES_ID = '   + IntToStr(Valor_int(Copy(StrParametros[0],2,6)));
          SQLAtivo := '';
          SQLOrder := ' order by PORTADORES_ID';
        end
      else
        begin
          case Valor_Int(StrParametros[1]) of
            0: SQLAtivo := ' and PORTADORES_STATUS = ' + QuotedStr('T');
            1: SQLAtivo := ' and PORTADORES_STATUS = ' + QuotedStr('F');
            2: SQLAtivo := '';
          end;
          case Valor_Int(StrParametros[2]) of
            0: SQLWhere := SQLWhere + ' and PORTADORES_NOME starting ' + QuotedStr(StrParametros[0]);
            1: SQLWhere := SQLWhere + ' and PORTADORES_ID >= '          + iif(StrEmpty(StrParametros[0]),'0',StrParametros[0]);
            2: SQLWhere := SQLWhere + ' and PORTADORES_NOME like '     + QuotedStr('%' + StrParametros[0] + '%');
          end;
          case Valor_Int(StrParametros[2]) of
            0: SQLOrder := ' order by PORTADORES_NOME';
            1: SQLOrder := ' order by PORTADORES_ID';
            2: SQLOrder := ' order by PORTADORES_NOME';
          end;
        end;

      Registros := ConexoesControl.TotalRegistros('select count(*) as REGISTROS from PORTADORES '+ SQLWhere + SQLAtivo);

      if Registros <= Valor_Int(limit) then
        DataSetPortadores := ConexoesControl.Abre_Tabelas('select * from PORTADORES ' +
                                                        'join CIDADES  on CIDADES_ID  = PORTADORES_ID_CIDADES '  +
                                                        'join EMPRESAS on EMPRESAS_ID = PORTADORES_ID_EMPRESAS ' +
                                                        'join BANCOS   on BANCOS_ID   = PORTADORES_ID_BANCOS '   +
                                                         SQLWhere + SQLAtivo + SQLOrder)
      else
        DataSetPortadores := ConexoesControl.Abre_Tabelas('select first ' + limit + ' skip ' + start + ' * from PORTADORES ' +
                                                          'join CIDADES  on CIDADES_ID  = PORTADORES_ID_CIDADES '  +
                                                          'join EMPRESAS on EMPRESAS_ID = PORTADORES_ID_EMPRESAS ' +
                                                          'join BANCOS   on BANCOS_ID   = PORTADORES_ID_BANCOS '   +
                                                          SqlWhere + SqlAtivo +  SqlOrder);

      PortadoresVO           := TPortadoresVO.Create;
      PortadoresVO.results := TObjectList<TPortadoresBasicaVO>.Create;
      PortadoresVO.Total     := Registros;
      try
        DataSetPortadores.First;
        while not DataSetPortadores.Eof do
          begin
            PortadoresBasicaVO               := TPortadoresBasicaVO.Create;
            PortadoresBasicaVO.PORTADORES_ID := DataSetPortadores.FindField('PORTADORES_ID').AsInteger;
            DataSetToObject(DataSetPortadores,PortadoresBasicaVO);
            PortadoresVO.results.Add(PortadoresBasicaVO);
            DataSetPortadores.Next;
          end;
      finally
        FreeAndNil(StrParametros);
        FreeAndNil(DataSetPortadores);
        FreeAndNil(ConexoesControl);
      end;
    end;

  Result := PortadoresVO;

end;

class function TPortadoresVO.GetByID(Parametros: integer): TPortadoresVO;
var
  ConexoesControl    : TConexoesController;
  PortadoresVO       : TPortadoresVO;
  PortadoresBasicaVO : TPortadoresBasicaVO;
  DataSetPortadores  : TDataSet;
begin
  ConexoesControl      := TConexoesController.Create;
  DataSetPortadores    := ConexoesControl.Abre_tabelas('select * from PORTADORES where PORTADORES_ID = ' + valor_str(Parametros));
  PortadoresVO         := TPortadoresVO.Create;
  PortadoresVO.results := TObjectList<TPortadoresBasicaVO>.Create;
  PortadoresVO.Total   := 0;
  try
    if not DataSetPortadores.IsEmpty then
      begin
        PortadoresVO.Total   := 1;
        PortadoresBasicaVO   := TPortadoresBasicaVO.Create;
        DataSetToObject(DataSetPortadores,PortadoresBasicaVO);
        PortadoresVO.results.Add(PortadoresBasicaVO);
      end;
  finally
    FreeAndNil(DataSetPortadores);
    FreeAndNil(ConexoesControl);
  end;
  Result := PortadoresVO;
end;

class function TPortadoresVO.CreateRecord(PortadoresBasicaVO: TPortadoresBasicaVO): TPortadoresVO;
var
  ConexoesControl   : TConexoesController;
  DataSetPortadores : TDataSet;
begin
  ConexoesControl   := TConexoesController.Create;
  DataSetPortadores := ConexoesControl.Abre_tabelas('select * from PORTADORES where PORTADORES_ID = 0 ');
  Result            := TPortadoresVO.Create;
  Result.results    := TObjectList<TPortadoresBasicaVO>.Create;
  Result.Total      := 0;
  try
    DataSetPortadores.Append;
    PortadoresBasicaVO.PORTADORES_ID := ConexoesControl.Ultimo_ID('PORTADORES','T');
    objectToDataSet(PortadoresBasicaVO,DataSetPortadores);
    try
      DataSetPortadores.Post;
      Result.Total   := 1;
      Result.results.Add(PortadoresBasicaVO);
    except
      on e: exception do gera_log(e.message);
    end;
  finally
    FreeAndNil(DataSetPortadores);
    FreeAndNil(ConexoesControl);
  end;
end;

class function TPortadoresVO.UpdateRecord(Parametros:Integer;PortadoresBasicaVO: TPortadoresBasicaVO): TPortadoresVO;
var
  ConexoesControl  : TConexoesController;
  DataSetPortadores  : TDataSet;
begin
  ConexoesControl    := TConexoesController.Create;
  DataSetPortadores  := ConexoesControl.Abre_tabelas('select * from PORTADORES where PORTADORES_ID = ' + valor_str(Parametros));
  Result             := TPortadoresVO.Create;
  Result.results     := TObjectList<TPortadoresBasicaVO>.Create;
  Result.Total       := 0;
  try
    if not DataSetPortadores.IsEmpty then
      begin
        DataSetPortadores.Edit;
        PortadoresBasicaVO.PORTADORES_ID := Parametros;
        objectToDataSet(PortadoresBasicaVO,DataSetPortadores);
        try
          DataSetPortadores.Post;
          Result.Total   := 1;
        except
          on e: exception do gera_log(e.message);
        end;
      end;
  finally
    FreeAndNil(DataSetPortadores);
    FreeAndNil(ConexoesControl);
  end;
end;

class function TPortadoresVO.DeleteRecord(Parametros:Integer): TPortadoresVO;
var
  ConexoesControl  : TConexoesController;
begin
  ConexoesControl  := TConexoesController.Create;
  Result           := TPortadoresVO.Create;
  Result.results   := TObjectList<TPortadoresBasicaVO>.Create;
  Result.Total     := 0;
  try
    try
      ConexoesControl.ExecutaScriptSQL('delete from PORTADORES where PORTADORES_ID = ' + Valor_Str(Parametros));
      Result.Total   := 1;
    except
      on e: exception do gera_log(e.message);
    end;
  finally
    FreeAndNil(ConexoesControl);
  end;
end;

end.
